var observablekvstore=function(e){"use strict";const t=Symbol("store"),s=Symbol("observers");class r{constructor(e,t,s){this.key=e,this.value=t,this.newValue=s}}const n=Object.seal(class{constructor(){this[t]=new Map,this[s]=new Set}get(e){return Promise.resolve(this[t].get(e))}set(e,s){const n=new r(e,this[t].get(e),s);return new Promise((e,s)=>{void 0===n.newValue?this[t].delete(n.key)?e():s(new Error("Key was not found.")):(this[t].set(n.key,n.newValue),e())}).then(this.notify(n))}delete(e){const s=new r(e,this[t].get(e));return new Promise((e,r)=>{this[t].delete(s.key)?e():r(new Error("Key was not found."))}).then(this.notify(s))}observe(e){return new Promise((t,r)=>{"function"==typeof e?(this[s].add(e),t()):r(new Error("Callback should be of type 'function'."))})}disconnect(e){return new Promise((t,r)=>{this[s].delete(e)?t():r(new Error("Callback was not registered."))})}notify(e){this[s].forEach(t=>t(e))}});return e.kvStore=n,e}({});
//# sourceMappingURL=index.iife.js.map
