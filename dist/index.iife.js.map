{"version":3,"file":"index.iife.js","sources":["../src/entity.js","../src/observable-kv-store.js"],"sourcesContent":["/**\n * Internal mutation tracking class\n *\n * @class Entity\n */\nexport class Entity {\n\n\t/**\n\t * Constructor\n\t *\n\t * @param  {(string|number|symbol)} key key identifier, like a property key\n\t * @param  {*} oldValue value that is accociated with the key\n\t * @param  {*} value current value associated with the key\n\t * @returns {Entity} constructed Entity\n\t * @memberof Entity\n\t */\n\tconstructor(key, oldValue, value) {\n\t\tthis.key = key;\n\t\tthis.oldValue = oldValue;\n\t\tthis.value = value;\n\t}\n}\n","import { Entity } from './entity';\n// State store for e.g. class properties\n\nconst store = Symbol('store');\nconst observers = Symbol('observers');\n\n/**\n * kvStore class\n *\n * @class kvStore\n */\nconst kvStore = Object.seal(class kvStore {\n\n\t/**\n\t * Creates an instance of kvStore.\n\t *\n\t * @memberof kvStore\n\t */\n\tconstructor() {\n\t\tthis[store] = new Map();\n\t\tthis[observers] = new Set();\n\t}\n\n\t/**\n\t * Get the stored value.\n\t *\n\t * @param {(string|number|symbol)} key identifier, like a property key\n\t * @returns {Promise} resolves with value for the associated key, or undefined\n\t * @memberof kvStore\n\t */\n\tget(key) {\n\t\treturn Promise.resolve(this[store].get(key));\n\t}\n\n\t/**\n\t * Sets a value with a key in the store.\n\t * If value is undefined it is deleted.\n\t *\n\t * @param {(string|number|symbol)} key identifier, like a property key\n\t * @param {*} value new value associated with the key\n\t * @returns {Promise} resolves undefined if successful, rejects if error\n\t * @memberof kvStore\n\t */\n\tset(key, value) {\n\t\tconst entity = new Entity(key, this[store].get(key), value);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (typeof entity.value === 'undefined') {\n\t\t\t\tif (this[store].delete(entity.key)) {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treject(new Error('Key was not found.'));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis[store].set(entity.key, entity.value);\n\t\t\t\tresolve();\n\t\t\t}\n\n\t\t}).then(this.notify(entity));\n\t}\n\n\t/**\n\t * Deletes a value with a key in the store.\n\t *\n\t * @param {(string|number|symbol)} key identifier, like a property key\n\t * @returns {Promise} resolves undefined if successful, rejects if error\n\t * @memberof kvStore\n\t */\n\tdelete(key) {\n\t\tconst entity = new Entity(key, this[store].get(key));\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (this[store].delete(entity.key)) {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treject(new Error('Key was not found.'));\n\t\t\t}\n\t\t}).then(this.notify(entity));\n\t}\n\n\t/**\n\t * Subscibe to be notified if the store was mutated.\n\t *\n\t * @param {Function} callback will be invoked upon mutation\n\t * @returns {Promise} resolves undefined if successful, rejects if error\n\t * @memberof kvStore\n\t */\n\tobserve(callback) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\tthis[observers].add(callback);\n\t\t\t\tresolve();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treject(new Error('Callback should be of type \\'function\\'.'));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Subscibe to be notified if the store was mutated.\n\t *\n\t * @param {Function} callback will be invoked upon mutation\n\t * @returns {Promise} resolves undefined if successful, rejects if error\n\t * @memberof kvStore\n\t */\n\tdisconnect(callback) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (this[observers].delete(callback)) {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treject(new Error('Callback was not registered.'));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Notifies subscribers by calling them in order of insertion.\n\t *\n\t * @private\n\t * @param {Entity} entity Entity obj\n\t * @memberof kvStore\n\t */\n\tnotify(entity) {\n\t\tthis[observers].forEach((observer) => observer(entity));\n\t}\n});\n\nexport { kvStore };\n"],"names":["Entity","constructor","key","oldValue","value","store","Symbol","observers","kvStore","Object","seal","Map","Set","get","Promise","resolve","this","set","entity","reject","delete","Error","then","notify","observe","callback","add","disconnect","forEach","observer"],"mappings":"qCAKO,MAAMA,EAWZC,YAAYC,EAAKC,EAAUC,QACrBF,IAAMA,OACNC,SAAWA,OACXC,MAAQA,GChBf,MAAMC,EAAQC,OAAO,SACfC,EAAYD,OAAO,aAOnBE,EAAUC,OAAOC,KAAK,MAO3BT,mBACMI,GAAS,IAAIM,SACbJ,GAAa,IAAIK,IAUvBC,IAAIX,UACIY,QAAQC,QAAQC,KAAKX,GAAOQ,IAAIX,IAYxCe,IAAIf,EAAKE,SACFc,EAAS,IAAIlB,EAAOE,EAAKc,KAAKX,GAAOQ,IAAIX,GAAME,UAE9C,IAAIU,QAAQ,CAACC,EAASI,UACA,IAAjBD,EAAOd,MACbY,KAAKX,GAAOe,OAAOF,EAAOhB,KAC7Ba,IAGAI,EAAO,IAAIE,MAAM,6BAIbhB,GAAOY,IAAIC,EAAOhB,IAAKgB,EAAOd,OACnCW,OAGCO,KAAKN,KAAKO,OAAOL,IAUrBE,OAAOlB,SACAgB,EAAS,IAAIlB,EAAOE,EAAKc,KAAKX,GAAOQ,IAAIX,WAExC,IAAIY,QAAQ,CAACC,EAASI,KACxBH,KAAKX,GAAOe,OAAOF,EAAOhB,KAC7Ba,IAGAI,EAAO,IAAIE,MAAM,yBAEhBC,KAAKN,KAAKO,OAAOL,IAUrBM,QAAQC,UACA,IAAIX,QAAQ,CAACC,EAASI,KACJ,mBAAbM,QACLlB,GAAWmB,IAAID,GACpBV,KAGAI,EAAO,IAAIE,MAAM,6CAYpBM,WAAWF,UACH,IAAIX,QAAQ,CAACC,EAASI,KACxBH,KAAKT,GAAWa,OAAOK,GAC1BV,IAGAI,EAAO,IAAIE,MAAM,mCAYpBE,OAAOL,QACDX,GAAWqB,QAASC,GAAaA,EAASX"}