const e=Symbol("store"),t=Symbol("observers");class s{constructor(e,t,s){this.key=e,this.value=t,this.newValue=s}}const n=Object.seal(class{constructor(){this[e]=new Map,this[t]=new Set}get(t){return Promise.resolve(this[e].get(t))}set(t,n){const o=new s(t,this[e].get(t),n);return new Promise((t,s)=>{void 0===o.newValue?this[e].delete(o.key)?t():s(new Error("Key was not found.")):(this[e].set(o.key,o.newValue),t())}).then(this.notify(o))}delete(t){const n=new s(t,this[e].get(t));return new Promise((t,s)=>{this[e].delete(n.key)?t():s(new Error("Key was not found."))}).then(this.notify(n))}observe(e){return new Promise((s,n)=>{"function"==typeof e?(this[t].add(e),s()):n(new Error("Callback should be of type 'function'."))})}disconnect(e){return new Promise((s,n)=>{this[t].delete(e)?s():n(new Error("Callback was not registered."))})}notify(e){this[t].forEach(t=>t(e))}});export{n as kvStore};
//# sourceMappingURL=index.esm.js.map
