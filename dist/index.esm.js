class e{constructor(e,t,s){this.key=e,this.oldValue=t,this.value=s}}const t=Symbol("store"),s=Symbol("observers"),o=Object.seal(class{constructor(){this[t]=new Map,this[s]=new Set}get(e){return Promise.resolve(this[t].get(e))}set(s,o){const r=new e(s,this[t].get(s),o);return new Promise((e,s)=>{void 0===r.value?this[t].delete(r.key)?e():s(new Error("Key was not found.")):(this[t].set(r.key,r.value),e())}).then(this.notify(r))}delete(s){const o=new e(s,this[t].get(s));return new Promise((e,s)=>{this[t].delete(o.key)?e():s(new Error("Key was not found."))}).then(this.notify(o))}observe(e){return new Promise((t,o)=>{"function"==typeof e?(this[s].add(e),t()):o(new Error("Callback should be of type 'function'."))})}disconnect(e){return new Promise((t,o)=>{this[s].delete(e)?t():o(new Error("Callback was not registered."))})}notify(e){this[s].forEach(t=>t(e))}});export{o as kvStore};
//# sourceMappingURL=index.esm.js.map
